c
n
invite_sender_redeem_time.nil? && invited_user.rides.count > 0
n
c
n
c
invited_user.rides.count
invited_user.rides
invited_user
user
invite_sender_redeem_time.nil? && invited_user.rides.count > 0
n
user
c
user
c
user2
exit
user2.save!
user2
c
n
user
n
user
c
    end
      scooter.rides << ride
      ride.set_end_time
      ride = Ride.new
3.times do
user.rides
user
c
BASE_FEE + PER_MINUTE_FEE * ((end_time - created_at) / 60).to_i
(end_time - created_at).to_i
PER_MINUTE_FEE * (end_time - created_at).to_i
PER_MINUTE_FEE
BASE_FEE + PER_MINUTE_FEE * (end_time - created_at).to_i
(end_time - created_at).to_i
(end_time - created_at)
(end_time - created_at
end_time - created_at)
created_at
end_time
c
scooter.available?
c
scooter.available?
c
scooter.available?
c
scooter.available?
c
scooter.available
scooter
scooter.rides
scooter.available
c
Scooter.available
c
scooter.rides << Ride.new
scooter.rides
c
proposed_end_time.past?
proposed_end_time
c
proposed_end_time
c
ride.active?
ride
exit
